//file:noinspection SpellCheckingInspection

import io.pzstorm.capsid.setup.VmParameter
import io.pzstorm.capsid.setup.xml.LaunchRunConfig

plugins {
    id 'io.pzstorm.capsid' version '0.4.0'

    // Plugin that keeps your code spotless with Gradle
    // https://plugins.gradle.org/plugin/com.diffplug.spotless
    id "com.diffplug.spotless" version "5.12.1"

    // https://plugins.gradle.org/plugin/net.ltgt.errorprone
    id 'net.ltgt.errorprone' version '2.0.1'
}
// is gradle executing on CI server?
def isCI = System.getenv("CI") ?: 'false'

allprojects {
    repositories { mavenCentral() }
    project.ext.set('CI', isCI)
}

// make sure to configure zombie subproject first because other
// subprojects depend on including it's sourceset output
def zombieProject = project(':zombie')
subprojects.sort {
    return it.name.equals('zombie') ? 0 : 1
}.each {
    it.group 'io.github.pzstorm'
    it.version '0.1.0'

    it.apply plugin: 'java'
    it.apply plugin: 'net.ltgt.errorprone'
    it.apply plugin: 'com.diffplug.spotless'
    it.apply from: "https://gist.githubusercontent.com/yooksi/${spotlessGistID}/raw/spotless.gradle"

    // add dummy zomboid classes to classpath when compiling on CI
    if (isCI && !it.name.equals('zombie')) {
        it.sourceSets.main.compileClasspath += zombieProject.sourceSets.main.output
    }

    it.dependencies {
        // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
        errorprone 'com.google.errorprone:error_prone_core:2.6.0'

        // https://mvnrepository.com/artifact/com.google.errorprone/javac
        errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')

        // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

        // https://mvnrepository.com/artifact/org.jetbrains/annotations
        compileOnly 'org.jetbrains:annotations:20.1.0'
    }
}

capsid {
    isModProject = false
    setProjectRepository('pzstorm', 'storm')
}

sourceSets {
    // remove media sourceSet created by capsid
    remove(sourceSets.media)
}

tasks.createRunConfigurations.configure {
    actions.clear()
    doLast {
        def vmParameterBuilder = new VmParameter.Builder()
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os == org.gradle.internal.os.OperatingSystem.LINUX) {
            vmParameterBuilder = vmParameterBuilder
                    .withJavaLibraryPaths(gameDir as String, "${gameDir}/linux64" as String, "${gameDir}/jre64/lib/amd64" as String)
                    .withLwjglLibraryPaths(gameDir)
        }
        //@formatter:off
        LaunchRunConfig launchStorm = new LaunchRunConfig(
                "Launch Storm", "io.pzstorm.storm.core.StormLauncher",
                vmParameterBuilder, [
                Main: new File(file(gameDir), "logs/storm/main.log").toPath() ,
                Debug: new File(file(gameDir), "logs/storm/debug.log").toPath()] as Map
        )//@formatter:on
        launchStorm.vmParamBuilder.build()
        launchStorm.configure(getProject()).writeToFile()
    }
}
